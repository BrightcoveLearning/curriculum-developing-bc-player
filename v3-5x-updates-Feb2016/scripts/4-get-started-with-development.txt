(Intro slide)
Up to now we have been laying the foundation on which to build or development with Brightcove Player knowledge. Now we are going to start coding.

The use case for which we are writing code is to programmatically play the video. We know there are other ways to start playing automatically, like clicking yes to autostart in Studio, but this is a great exercise on which to get started.

At a bit more technical level, we are going to be using an event handler for the **loadedmetadata** as the place to write the code to make the video begin playing.

(screen recording)
I'm browsing to Video Cloud Studio. In the Players Module I am going to create a new player and name it.

I can see details for this player by clicking on the name. We'll be looking at some of these options in later videos.

Let's publish a video in our new player. I will go to the Media module, select a video, then click publish.

It is easy to forget the player with which you want to publish the video, so choose the correct player. I'm going to copy the advanced code (which is the non-iframe implementation), then go to my editor.

Here are the student files you can download if you wish. What you'll see in the student files, for every task, are three files. So here's you're starting file, which in this case is just a blank HTML page. I'm going to paste the player code in here. The next file details the steps you need to perform to complete the task on which we are working. The last file for each task is the solution, which is the finished product. In summary, for each task there is a starting file, the steps to accomplish the task, and then the result from following the steps.

Let's look at what code we pasted into our blank HTML page. The first tag was the video tag, and also a script tag. The video tag is pretty straight forward as to what it does. The tag contains attributes for
  *video to play
  *the Video Cloud account
  *the player we are using
  * the data-embed has to do with a Brightcove Player called embeds, which lets you create parent/child relationships with players, and is not covered in this course. There are numerous docs on this subject if you are interested.
  *a class to use when styling with CSS
  *a boolean to show the controls

The script that is loaded is created as part of the player creation process. For instance, if you have changed anything in the player properties page, those changes would be reflected in the script file, includign styling changes. The Brightcove Player API is also part of the minified JavaScript file.

I'm going to add an ID here, because later in JavaScript we need an ID to get a reference to the video element. I'm going to use myPlayerID for the ID. And that's so we can talk to the player later in JavaScript. And now what we want to do is issue the play method. We want the video to play when the page loads.

Let's get started by first inserting a <script> block. In the script block we'll use the videojs() method to change the generic video element into a Brightcove Player. By the way, the videojs method is part of the imported JavaScript file.

Before we use the play() method, we have to be sure the video is loaded and ready to play. Again, we are working in an event driven environment, so we will wait for the loadedmetadata event. After this event is dispatched, we know we can play the video. We'll use the on() method to associate a dispatched event with an anonymouse callback function that acts as an event handler for us.

We will want to interact with the player in the event handler, so first we get a reference to the player by creating a variable call myPlayer. We will assign that player this, which is a reference to the video object.

Now we're ready to play the video. Let's use the variable created as a reference to the player, and the play() method.

Now we are ready to test, so let's save and browse our page.

As you can see, the video is playing so our code is successful. The video is quite small, it defaults to 300  x 150, so let's go back to our code and style the player to be larger.

In the head section of the HTML page, we'll insert a style block, and utilizing the class in the player tag, video-js, set a new width and height.

Great, another test now to be sure it worked.

Looking good, and we are successful coding for the first use case.

Before we move on, let's use another event. In this case, the timeudate event. This event is dispatched every 15-250 milliseconds, depending on the playback technology in use. So really often.

Also, we want to show usign the on() method with a function declaration. In the on() method we will call an event hanlder function named showUpdate.

 All we'll do in the event handler is log the event passed to the event handler.

Note that the function is defined after its actual use, which is fine for function declarations.

Let's go watch the new event handler in actions.

And as we see, the event is dispatched very frequently.

Now we are going to use some slides for a quick review and to look at some other code we will use later.

Part of the code shown here we have seen, and that is creating a variable to hold a reference to the player. We are using a different event, and different syntax to get to that varialbe assignment. It is SO common to need to wait for the player to be ready to interact with special syntax was written for that. That is using the ready method, which under the hood can also be thought of as a special kind of event.

Why not use ready() 
