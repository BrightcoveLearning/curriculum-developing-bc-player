(intro slide)There are a few JavaScript concepts I want to be sure you understand before we jump into development. These are key tools from JavaScript that are used frequently in Brightcove Player development. Please note that if you have an understanding of callback functions and an event driven development framework, you do not need to watch this video.(JavaScript code dilemma slide)Before we actually look at the JavaScript concepts, I need to mention an issue about how to implement the code we will write. Initially for the development courses at Brightcove we followed many best practices and design patterns. What we found it that for some attendees we obscured the Brightcove development with JavaScript issues. For this reason, the code we show stresses the Brightcove API. You may wish to implement the code in your favorite manner. This slide shows a few bullets about the Module pattern, a favorite pattern of ours to use in more complex JavaScript code.(event driven slide)The Brightcove Player API is an event driven framework. As you can see by the definition, this means that program behavior is driven by the production, detection and consumption of events. In simpler terms, everything that happens with the player takes place because an event dispatched, then handled, and associated event handler code executed.Program execution behavior is NOT as you see on the bottom-left, where line 1, then 2 then 3 are executed. Actual program execution is as shown on the bottom-right, where an event, like when the player is ready or the video starts playing, is dispatched and then an event handler function is called and code is executed.(callback function slide)Another thing that we have to understand are callback functions. This is standard JavaScript technique and not something particular to Brightcove. But it's really good thing we have this callback functionality in JavaScript that the Brightcove  engineers can use, and here's why.Consider the method called getVideo(). I could ask the question how long is it going to take to get your requested video to your computer or device after getVideo is called? This can be a confusing question, because there's not a single answer. The answer is it depends. And that is exactly why we have to have a callback function.So what happens when I call getVideo? The method sends a request to a Brightcove server for the video object. At some point the data will be returned. Only at this point will the callback function be called. So no matter how long it takes, the callback function is not called until the video gets returned to the client. By the way, there is a timeout of 45 seconds before an error is displayed if the video is not returned.(Callback functions implementations slide)I don't want to get too much into the details, but callback functions need to be thoroughly understood, as you will use them often when developing with Brightcove Player.We need to decide how to write the callback function. There are three options:1. Anonymous function2. Function declaration3. Function expressionThe anonymous function is a common technique to use for callbacks. This keeps the call to the function and the callback together. This is not a good technique when you will want to use the same callback function for multiple other method calls as it is not reusable. The previous slide showed an example of an anonymous function.The function declaration is what most people would think of the "normal way" to define a function. An example will be shown shortly. The good thing is that the function will be loaded before any code is actually executed. The bad thing is this technique could lead to JavaScript collisions, as it is possible to have name conflicts if not implemented carefully.  The Module design pattern mentioned earlier is a good way to avoid name conflicts.The function expression defines the function as a variable. An example will be shown shortly. If you try to call a function expression before it's loaded, you'll get an error because function expressions load only when the interpreter reaches that line of code. The good thing is you can scope function expressions as you do any other variable.(anonymous function example slide)You see in this example an anonymous function. The callback function is defined as the argument of the getVideo method, and the function has no name.(function declaration example slide)Here you see a function declaration. Note that the function can be called before it is defined as JavaScript will look for all function declarations before executing any code. The function is defined separately from the call to getVideo so it could be reused.(function expression example slide)Lastly is a function expression. Note that the function is defined before it is used. The function is defined separately from the call to getVideo so it could be reused.We've now built a good foundation, so let's get coding!