(Intro slide)
Up to now we have been laying the foundation on which to build our development with Brightcove Player knowledge. Now we are going to start coding.

The use case we are writing code for is to programmatically play the video. We know there are other ways to start playing the video on page load, like clicking yes to autostart in Studio, but this is a great exercise on which to get started.

At a bit more technical level, we are going to be using an event handler for the **loadedmetadata** event as the place to write the code to make the video begin playing.

(screen recording)
I'm browsing to Video Cloud Studio. In the Players Module I am going to create a new player and name it.

I can see details for this player by clicking on the name. We'll be looking at some of these options in later videos.

Let's publish a video in our new player. I will go to the Media module, select a video, then click publish.

It is easy to forget the player with which you want to publish the video, so choose the correct player. 

I'm going to copy the advanced code (which is the non-iframe implementation), then go to my editor.

Here are the student files you can download if you wish. What you'll see in the student download, for every task, are three files. 

So here's you're starting file, which in this case is just a blank HTML page. I'm going to paste the player code in here. 

The next file details the steps you need to perform to complete the task on which we are working. The steps are provided in case you would like to re-do writing the code on your own.

The last file for each task is the solution, which is the finished product after completing the steps. 

In summary, for each task there is a starting file, the steps to accomplish the task, and then the result from following the steps.

Let's go back and look at what code we pasted into our blank HTML page. We see the video tag, and also a script tag. 

The video tag contains attributes for
  *the video to play
  *the Video Cloud account we are using
  *the player we are using
  *a class to use when styling with CSS
  *a boolean to show the controls
  * the data-embed, which I jumped over, has to do with a Brightcove Player feature called embeds, which lets you create parent/child relationships with players. This feature is not covered in this course. There are numerous docs on this subject if you are interested.


The script that is loaded is created as part of the player creation process. For instance, if you have changed anything in the player properties page, those changes would be reflected in the script file, including styling changes. The Brightcove Player API is also part of the minified JavaScript file.

I'm going to add an ID here, because later in JavaScript we need an ID to get a reference to the video element. I'm going to use myPlayerID for the ID. 

Now what we want to do is call the play method, to play the video when the page loads.

Let's get started by first inserting a <script> block. In the script block we'll use the videojs() method to change the generic video element into a Brightcove Player. By the way, the videojs method is part of the imported JavaScript file.

Before we use the play() method, we have to be sure the video is loaded and ready to play. Again, we are working in an event driven environment, so we will wait for the loadedmetadata event. After this event is dispatched, we know we can play the video. We'll use the on() method to associate a dispatched event with an anonymous callback function that is an event handler.

We will want to interact with the player in the event handler, so first we get a reference to the player by creating a variable call myPlayer. We will assign that player the value this, which is a reference to the video object.

At this point we want to play the video. Let's use the variable created as a reference to the player, and the play() method.

Now we are ready to test, so let's save and browse our page.

As you can see, the video is playing so our code is successful. The video is quite small, it defaults to 300 pixels x 150 pixels, so let's go back to our code and style the player to be larger.

In the head section of the HTML page, we'll insert a style block, utilizing the class in the player tag, video-js. Let’s set a new width and height.

Great, another test now to be sure it worked.

Looking good, and have been successful coding for our first use case.

Before we move on, let's use another event for more practice. In this case, the timeudate event. This event is dispatched every 15-250 milliseconds when the video is playing, depending on the playback technology in use. In other words, really often.

Also, we want to practice code using the on() method with a function declaration. Previously we have only used an anonymous function. In the on() method we will call an event handler function named showUpdate.

All we'll do in the event handler is log the event passed as a parameter to the event handler.

Note that the function is defined after its actual use, which is fine for function declarations.

Let's go watch the new event handler in action.

And as we see, the event is dispatched very frequently. And here is a quick look at the event object, which isn’t very interesting to us at this point.

(Get Reference to Player slide)
Now we are going to use some slides for a quick review, and to look at some other code we will use later.

Part of the code shown here we have seen, and that is creating a variable to hold a reference to the player. We are using a different event, and different syntax to code that variable assignment. 

It is SO common to need to wait for the player to be ready to interact with, special syntax was written for that. That special syntax uses the ready method, which under the hood can also be thought of as a special kind of event. An anonymous function is used to house the code for the event handler.

(Get Reference to Player slide cont)
Why not use ready() instead of waiting for the loadedmetadata event? The reason is ready waits for the player to be ready to interact with, whereas loadedmetadata means the video in the player is ready to interact with. In fact, if you use ready and try the play() method, it might work, depending on how long it took the video object to download. Of course, we can't write code the might work under optimal circumstances.

(Player methods slide)
As we have seen, the play() method is used to play a video in the player.

(Player events slide)
We're already experts on handling events as we've done that a couple of times, but here is a bit more information on setting up event handling.

We used the on() method in the code we wrote. This handles the event every time it is dispatched for the life of the application. 

If you use the one() method, the event is handled only once.

If in your application logic you want to handle an event until some threshold is met, you can use the off() method to remove the event listener.

(player event cont slide)
Here is a summary of what we did in the code for our task, using the on() method to listen for the loadedmetatdata event, and using an anonymous function to play the video.

(task 1 slide)
We’ve finished our first coding task, and now have the foundational knowledge of how to programmatically interact with Brightcove Player.

In the next video we will use the player catalog to allow user interaction to change the video currently playing in the player.

